devicesMap = {}
map = {}
showPorts = true
showFirewall = false
remote = false

firewalloutput = function(rules)
        if rules.len == 0 then return null
        firewallRules = "ACTION PORT SOURCE_IP DESTINATION_IP\n"
        firewallRules = firewallRules + rules.join("\n")
        return format_columns(firewallRules)+"\n"
end function

scanRouter = function(pRouter, depth=0)
    pDepth = depth+1
    forReturn = {}

    ports = pRouter.device_ports(pRouter.local_ip)
    if ports != null and showPorts then
        forReturn["ports"] ={}
        forReturn["ports"]["0"]={"open":true, "service":"kernel_router", "version":pRouter.kernel_version, "lan_ip":pRouter.local_ip}
        for port in ports
            info = pRouter.port_info(port).split(" ")
            forReturn["ports"][port.port_number]={"open":port.is_closed==false, "service":info[0], "version":info[1], "lan_ip":port.get_lan_ip}
        end for
    end if

    firewall = pRouter.firewall_rules
    if firewall != null and firewall.len >0 then forReturn["firewall"] =firewall

    forReturn["router"] = pRouter

    forReturn["type"]="router"
    devicesMap[pRouter.local_ip] = forReturn
    forReturn["devices"] = {}
    devices = pRouter.devices_lan_ip()
    for ip in devices
        if devicesMap.hasIndex(ip) then continue
        devicesMap[ip]={}
        router = get_router(ip)
        if router == null then
            forReturn["devices"][ip] = {}
            forReturn["devices"][ip]["type"] = "server"
            forReturn["devices"][ip]["router"] = pRouter
            devicesMap[ip]=forReturn["devices"][ip]
            ports = pRouter.device_ports(ip)
            if ports != null and ports.len > 0 then
                if showPorts then
                    forReturn["devices"][ip]["ports"]={}
                    for port in ports
                        info = pRouter.port_info(port).split(" ")
                        if info[0] == "cam" then forReturn["devices"][ip]["type"] = "cam"
                        forReturn["devices"][ip]["ports"][port.port_number]={"open":port.is_closed==false, "service":info[0], "version":info[1]}
                    end for
                end if
            else
                forReturn["devices"][ip]["type"] = "pc"
            end if
        else
            forReturn["devices"][ip] = scanRouter(router, pDepth)
        end if
    end for
	return forReturn
end function

printTree  = function(map, pDepth =0)
    for index in map.indexes
        currentMap = map[index]
        if currentMap.hasIndex("public_ip") then print("<color=red>Public: "+currentMap["public_ip"]+"</color>")

        deviceIp=index+" "+"("+currentMap["type"]+")"
        deviceIp = ("    "*(pDepth))+deviceIp

        if currentMap["type"] == "router" then deviceIp = "<color=#00D8FF>"+deviceIp+"</color>"
        if currentMap["type"] == "server" then deviceIp = "<color=#00FF6A>"+deviceIp+"</color>"
        if currentMap["type"] == "cam" then deviceIp = "<color=#F2FF00>"+deviceIp+"</color>"
        if currentMap["type"] == "pc" then deviceIp = "<color=#FF00C7>"+deviceIp+"</color>"
        print(deviceIp)
        if currentMap.hasIndex("ports") then
            ports = currentMap["ports"]
            lines = ""
            for port in ports.indexes
                if ports[port]["open"] then state = "<color=#00FF00>+</color>" else state = "<color=#FF0000>-</color>"
                extraData = "\n"
                if ports[port].hasIndex("lan_ip") then
                    if ports[port]["lan_ip"] != index then
                        state = "<color=#00FFE5>></color>"
                        extraData = " "+ports[port]["lan_ip"]+"\n"
                    end if
                end if
                lines = lines+("__space__")+ state +" "+port+" "+ports[port]["service"]+" "+ports[port]["version"]+extraData


            end for
            formated = format_columns(lines)
            formated = replace_regex(formated, "__space__",("    "*(pDepth))+"<color=grey>|-</color> ")
            print(formated)
        end if
        if currentMap.hasIndex("devices") then printTree(currentMap["devices"], pDepth+1)
    end for
end function

//Command: networkscan
usageString = "Usage: networkscan (opt:-h ""show help"") (opt:--no-ports ""hide ports"") (opt:ip(1.1.1.1))";
router = get_router()

for e in params
    if e == "-h" then exit(usageString)
    if e == "-fw" then showFirewall = true
    if e == "--no-ports" then showPorts = false
    if is_valid_ip(e) then
        remote = true
        router = get_router(e)
    end if
end for

devicesMap[router.local_ip()]={}
map[router.local_ip()] = scanRouter(router)
map[router.local_ip()]["public_ip"] = router.public_ip

printTree(map)
print("\n")

//if showFirewall or showPorts then
//end if